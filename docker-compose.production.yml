version: '3.8'

services:
  # Production Database
  postgres-prod:
    image: postgres:13
    container_name: rtims-postgres-prod
    environment:
      POSTGRES_DB: rtims_prod
      POSTGRES_USER: rtims_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - rtims-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3

  # Production Redis
  redis-prod:
    image: redis:6-alpine
    container_name: rtims-redis-prod
    volumes:
      - redis_prod_data:/data
    networks:
      - rtims-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # Production Backend
  backend-prod:
    image: ${REGISTRY}/${BACKEND_IMAGE}:latest
    container_name: rtims-backend-prod
    environment:
      ENVIRONMENT: production
      PORT: 8080
      DATABASE_URL: postgres://rtims_user:${POSTGRES_PASSWORD}@postgres-prod:5432/rtims_prod?sslmode=disable
      REDIS_URL: redis://redis-prod:6379
      JWT_SECRET: ${JWT_SECRET}
      REFRESH_SECRET: ${REFRESH_SECRET}
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - rtims-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      replicas: 2

  # Production Frontend
  frontend-prod:
    image: ${REGISTRY}/${FRONTEND_IMAGE}:latest
    container_name: rtims-frontend-prod
    environment:
      NEXT_PUBLIC_API_URL: https://api.yourdomain.com/api/v1
    depends_on:
      - backend-prod
    networks:
      - rtims-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      replicas: 2

  # Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: rtims-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend-prod
      - backend-prod
    networks:
      - rtims-prod-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  rtims-prod-network:
    driver: bridge